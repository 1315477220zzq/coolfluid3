namespace cf3{
/**
@page installation Installing a developer version

@note This tutorial works only for Linux and Mac OS X command line <a href="http://en.wikipedia.org/wiki/Bash_(Unix_shell)">bash</a> environments.


@section _installation_register New Developers

The main development of coolfluid3 is hosted as a <a href=http://git-scm.com/>git</a> repository on <a href=https://github.com>github</a> .

Developers are required to create a github account at https://github.com and create a fork of their own version of coolfluid3 from
https://github.com/coolfluid/coolfluid3 .

Developers new to git or github should read github's excellent <a href=http://help.github.com/>help pages</a>.

You should now have your own repository of coolfluid3 at  https://github.com/your_name/coolfluid3 .

@section _installation_get_sources Get the sources

Make sure you have git installed, and configured for github as described <a href=http://help.github.com/set-up-git-redirect>here</a>.

Create a directory to hold your sources and the build files:

@verbatim
$> mkdir coolfluid3
$> cd coolfluid3
$> git clone git@github.com:your_name/coolfluid3.git coolfluid3
@endverbatim

Lets remember this directory (the parent of your git source tree) to help the rest of the installation:

@verbatim
$> export CF3=$PWD
@endverbatim

@section _installation_prerequisites Prerequisites

COOLFluiD 3 depends on several third-party libraries, to enable extra functionality. Of all the third-party libraries,
only 4 are absolutely necessary. These dependencies will allow coolfluid to build with minimum functionality, and several
disabled coolfluid libraries.

<ul>
 <li> <a href=http://www.cmake.org/> CMake </a> version 2.8.2 or higher.
 <li> <a href=http://www.boost.org/> Boost C++ Libraries </a>, offering a multitude of nice additions to C++.
 <ul>
  <li> Mandatory boost build options: @verbatim --with-test --with-thread --with-iostreams --with-filesystem --with-system --with-regex --with-date_time --with-program_options @endverbatim
  <li> Extra recommended boost build options:  @verbatim --with-python @endverbatim
 </ul>
 <li> <a href=http://www.open-mpi.org> open-mpi </a> or any other <a href=http://www.mcs.anl.gov/research/projects/mpi/>MPI</a> distribution.
 <li> <a href=http://eigen.tuxfamily.org>The Eigen 3 matrix library</a>
</ul>

Besides creating C++ applications using the coolfluid libraries, coolfluid libraries can also be used from Python scripts.
It is therefore highly recommended to make sure following dependency is also available:
<ul>
  <li> <a href=http://www.python.org/>Python</a> scripting.
  <ul>
    <li> Python must be available
    <li> boost must be compiled with Python support
  </ul>
</ul>

Other recommended third party libraries:
<ul>
  <li> Any of these parallel distributed mesh-partitioning libraries:
  <ul>
    <li> <a href=http://www.labri.fr/perso/pelegrin/scotch/>PTScotch</a>
    <li> <a href=http://www.cs.sandia.gov/Zoltan/>Zoltan</a> (also sub-package of Trilinos)
  </ul>
  <li> <a href=http://trilinos.sandia.gov/>Trilinos</a> for solving parallel distributed linear systems, required for the finite element solver UFEM
  <li> <a href=http://cgns.sourceforge.net/>CGNS</a> to read and write meshes in cgns format
  <li> <a href=http://www.paraview.org/>Paraview</a> libraries compiled with MPI for use with the coolfluid-client user interface, to visualize meshes.
</ul>

Other supported third party libraries of little use at the moment:
<ul>
  <li> <a href=http://www.cgal.org/>CGAL</a> for geometry related algorithms and mesh triangulation
  <li> <a href=http://code.google.com/p/google-perftools/>google-perftools</a> to inspect performance
  <li> <a href=http://crd.lbl.gov/~xiaoye/SuperLU/>superlu</a> to solve linear systems (not parallel)
</ul>

@subsection _installation_install_deps Installation of dependencies
Dependencies are most easily installed using the package manager on Linux or <a href="http://brew.sh/">homebrew</a> on Mac OS X
The following is a list of packages that can be installed on a "fresh" Fedora linux system to provide a working development environment:
@verbatim
gcc-c++
gcc-gfortran
openmpi-devel
blas-devel
lapack-devel
cmake-gui
boost-devel
python-devel
git
eigen3-devel
@endverbatim

On Fedora and certain other linux distributions, the MPI commands need to be made available using a module command:
@verbatim
module load mpi/openmpi-x86_64
@endverbatim
This can be put into the .bashrc or equivalent file to make it automatic on login.

Trilinos is not available on many systems as a package (Homebrew on OS X and the Arch Linux AUR being exceptions).
It will therefore need to be installed manually. We recommend using the latest version from the 11 series, currently Trilinos 11.14.3. After
unpacking the Trilinos source code and creating an empty build directory, the following script allows configuring Trilinos with appropriate settings for Coolfluid:
@verbatim
#!/bin/bash

sourcedir=$HOME/coolfluid/dependencies/sources/trilinos-11.12.1-Source
depsdir=$CF3/deps

CC=mpicc
CXX=mpic++
FC=mpif77

ccmake -D CMAKE_INSTALL_PREFIX:PATH=$depsdir -D CMAKE_BUILD_TYPE:STRING=RELEASE \
-D Trilinos_ENABLE_DEFAULT_PACKAGES:BOOL=OFF \
-D Trilinos_ENABLE_ALL_OPTIONAL_PACKAGES:BOOL=ON \
-D Trilinos_ENABLE_TESTS:BOOL=OFF \
-D Trilinos_ENABLE_Amesos:BOOL=ON \
-D Trilinos_ENABLE_AztecOO:BOOL=ON \
-D Trilinos_ENABLE_Belos:BOOL=ON \
-D Trilinos_ENABLE_Didasko:BOOL=OFF \
-D Didasko_ENABLE_TESTS:BOOL=OFF \
-D Didasko_ENABLE_EXAMPLES:BOOL=OFF \
-D Trilinos_ENABLE_Epetra:BOOL=ON \
-D Trilinos_ENABLE_EpetraExt:BOOL=ON \
-D Trilinos_ENABLE_ShyLU:BOOL=ON \
-D Trilinos_ENABLE_Tpetra:BOOL=ON \
-D Trilinos_ENABLE_Teko:BOOL=ON \
-D Trilinos_ENABLE_TpetraExt:BOOL=ON \
-D Trilinos_ENABLE_Ifpack:BOOL=ON \
-D Trilinos_ENABLE_Meros:BOOL=ON \
-D Trilinos_ENABLE_ML:BOOL=ON \
-D Trilinos_ENABLE_RTOp:BOOL=ON \
-D Trilinos_ENABLE_Teuchos:BOOL=ON \
-D Trilinos_ENABLE_Thyra:BOOL=ON \
-D Trilinos_ENABLE_ThyraCore:BOOL=ON \
-D Trilinos_ENABLE_Triutils:BOOL=ON \
-D Trilinos_ENABLE_Stratimikos:BOOL=ON \
-D Trilinos_ENABLE_Zoltan:BOOL=ON \
-D Zoltan_ENABLE_EXAMPLES:BOOL=ON \
-D Zoltan_ENABLE_TESTS:BOOL=ON \
-D Zoltan_ENABLE_ULLONG_IDS:Bool=ON \
-D TPL_ENABLE_BLAS:BOOL=ON \
-D TPL_ENABLE_LAPACK:BOOL=ON \
-D TPL_ENABLE_MPI:BOOL=ON \
-D BUILD_SHARED_LIBS:BOOL=ON \
-D Trilinos_VERBOSE_CONFIGURE:BOOL=FALSE \
  $sourcedir
@endverbatim
Here, the sourcedir variable at the top should point to the unpacked source directory, while depsdir is the directory where Trilinos will be installed ($CF3/deps in this tutorial).
Next, still in the build directory run:
@verbatim
make -j <number of CPUs> 
make install
@endverbatim

<hr>

@section _installation_build_coolfluid Build COOLFluiD

On this phase you will select your building options for cf3
Repeat this phase as often as you need and whenever you want to refresh your build directory.

@subsection _installation_create_a_build_directory_separate_from_the_sources Create a build directory separate from the sources

@verbatim
$> cd $CF3
$> mkdir build
@endverbatim

@subsection _installation_configure_the_build_with_your_options Configure the build with your options

Unlike COOLFluiD 2, there is no prepare.pl script. The developer must now call CMake directly.
CMake is a cross platform configuration/build system. The developer is advised to read the <a href="http://www.cmake.org/cmake/help/documentation.html">CMake documentation</a> for advanced configuration.
@verbatim
$> cd $CF3
$> mkdir build # this can be anywhere, really
$> cd build
$> CC=mpicc CXX=mpic++ FC=mpif77 cmake -DDEPS_ROOT:PATH=$CF3/deps -DBOOST_ROOT:PATH=/usr -DCMAKE_BUILD_TYPE:STRING=Debug $CF3/coolfluid3
@endverbatim
On OS X, BOOST_ROOT is /usr/local when using Homebrew.

@subsubsection _installation_build_type_options Build type options

The above command builds a Debug build. You can select from the following types:
@verbatim
-DCMAKE_BUILD_TYPE=RelWithDebInfo
-DCMAKE_BUILD_TYPE=Release (no debug symbols)
-DCMAKE_BUILD_TYPE=Debug (no optimization)
@endverbatim

@subsubsection _installation_some_more_configuration_options Some more configuration options

To force a specific compiler:
@verbatim
-DCMAKE_C_COMPILER=$CF3/deps/bin/mpicc
-DCMAKE_CXX_COMPILER=$CF3/deps/bin/mpicxx
@endverbatim
If CMake cannot find the MPI environment:
@verbatim
-DMPI_C_COMPILER=$CF3/deps/bin/mpicc
-DMPI_CXX_COMPILER=$CF3/deps/bin/mpicxx
@endverbatim
A few other options that can be used:
@verbatim
-DCF3_CXX_FLAGS="-march=Core2"       # Architecture optimization for Core2
-DCF3_SKIP_FORTRAN=ON                # When you don't need or don't have Fortran installed
-DCF3_ENABLE_WARNINGS=OFF            # For users that don't want to see all the warnings
-DCF3_ENABLE_GUI=OFF                 # When the gui is not to be built
@endverbatim

@subsubsection _installation_customizing_configuration_further Customizing configuration further

Calling the command
@verbatim
$> cd $CF3/build
$> ccmake ./
@endverbatim
This will show the interactive CMake configuration, where all available options are visible and can be changed. 
Press 'c' to configure, and afterwards 'g' to generate the build files.

@subsection _installation_compiling_coolfluid Compiling COOLFluiD

By default, the CMake configuration generates <a href="http://en.wikipedia.org/wiki/Make_(software)">makefiles</a> to compile %COOLFluiD. This is used by
@verbatim
$> cd $CF3/build
$> make -j2
@endverbatim
with the @c "-j2" assigning 2 processes to the compilation (e.g. for dual core)

<hr>

@section _installation_running_coolfluid_tests Running COOLFluiD tests

Coolfluid has many unit tests and acceptance tests. Unit tests are small executables that run each a maximum of 1 to 2 seconds, and test various classes and functions of coolfluid. They serve also as mini-manuals and examples of how to use coolfluid.
Acceptance tests are typically more full simulations that take a longer time to finish. They are typically made in the form of a script that gets executed by a coolfluid command-line interpreter @ref coolfluid-command.

To compile the tests, the developer has to make sure that the flags @c "-DCF3_ENABLE_UNIT_TESTS" and @c "-DCF3_ENABLE_ACCEPTANCE_TESTS" are passed to the CMake configuration. (They are on by default, but can be changed using @c "ccmake")
To run the tests:
@verbatim
$> cd $CF3/build
$> ctest
@endverbatim 
Individual tests can be selected. The developer is referred to the <a href="http://www.cmake.org/cmake/help/ctest-2-8-docs.html">CTest documentation</a>.

*/
}