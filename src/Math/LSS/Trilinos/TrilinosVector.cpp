// Copyright (C) 2010 von Karman Institute for Fluid Dynamics, Belgium
//
// This software is distributed under the terms of the
// GNU Lesser General Public License version 3 (LGPLv3).
// See doc/lgpl.txt and doc/gpl.txt for the license text.

////////////////////////////////////////////////////////////////////////////////////////////

#include "Common/Assertions.hpp"
#include "Common/Log.hpp"
#include "Math/LSS/Trilinos/TrilinosVector.hpp"

////////////////////////////////////////////////////////////////////////////////////////////

/**
  @file TrilinosVector.cpp Implementation of LSS::vector interface for Trilinos package.
  @author Tamas Banyai

  The chosen tool is epetra vector which has been implemented.
**/

////////////////////////////////////////////////////////////////////////////////////////////

using namespace CF;
using namespace CF::Math;
using namespace CF::Math::LSS;

////////////////////////////////////////////////////////////////////////////////////////////

TrilinosVector::TrilinosVector(const std::string& name) :
  LSS::Vector(name),
  m_neq(0),
  m_blockrow_size(0),
  m_is_created(false),
  m_vec(0),
  m_comm(Common::Comm::PE::instance().communicator())
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::create(const Common::Comm::CommPattern& cp, Uint neq)
{
/*
  int* gids= cp.gid()->pack();
  Epetra_BlockMap bm(-1,myelems,gids,neq,0,comm)
  m_vector=Teuchos::rcp(new Epetra_Vector());
  delete gids;
*/
  m_is_created=true;
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::destroy()
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::set_value(const Uint irow, const Real value)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::add_value(const Uint irow, const Real value)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::get_value(const Uint irow, Real& value)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::set_value(const Uint iblockrow, const Uint ieq, const Real value)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::add_value(const Uint iblockrow, const Uint ieq, const Real value)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::get_value(const Uint iblockrow, const Uint ieq, Real& value)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::set_rhs_values(const BlockAccumulator& values)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::add_rhs_values(const BlockAccumulator& values)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::get_rhs_values(BlockAccumulator& values)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::set_sol_values(const BlockAccumulator& values)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::add_sol_values(const BlockAccumulator& values)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::get_sol_values(BlockAccumulator& values)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::reset(Real reset_to)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::print(Common::LogStream& stream)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::print(std::ostream& stream)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::print(const std::string& filename, std::ios_base::openmode mode)
{
  std::ofstream stream(filename.c_str(),mode);
  print(stream);
  stream.close();
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosVector::data(std::vector<Real>& values)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

