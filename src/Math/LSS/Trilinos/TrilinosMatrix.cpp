// Copyright (C) 2010 von Karman Institute for Fluid Dynamics, Belgium
//
// This software is distributed under the terms of the
// GNU Lesser General Public License version 3 (LGPLv3).
// See doc/lgpl.txt and doc/gpl.txt for the license text.

////////////////////////////////////////////////////////////////////////////////////////////

#include "Common/Log.hpp"
#include "Math/LSS/Trilinos/TrilinosMatrix.hpp"

////////////////////////////////////////////////////////////////////////////////////////////

/**
  @file TrilinosMatrix.cpp implementation of LSS::TrilinosMatrix
  @author Tamas Banyai

  It is based on Trilinos's FEVbrMatrix.
**/

////////////////////////////////////////////////////////////////////////////////////////////

using namespace CF;
using namespace CF::Math;
using namespace CF::Math::LSS;

////////////////////////////////////////////////////////////////////////////////////////////

TrilinosMatrix::TrilinosMatrix(const std::string& name) :
  LSS::Matrix(name),
  m_matrix(0),
  m_is_created(false),
  m_neq(0),
  m_blockrow_size(0),
  m_blockcol_size(0)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::create(CF::Common::Comm::CommPattern& cp, Uint neq, std::vector<Uint>& node_connectivity, std::vector<Uint>& starting_indices, LSS::Vector::Ptr solution, LSS::Vector::Ptr rhs)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::destroy()
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::set_value(const Uint icol, const Uint irow, const Real value)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::add_value(const Uint icol, const Uint irow, const Real value)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::get_value(const Uint icol, const Uint irow, Real& value)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::solve(LSS::Vector::Ptr solution, LSS::Vector::Ptr rhs)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::set_values(const BlockAccumulator& values)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::add_values(const BlockAccumulator& values)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::get_values(BlockAccumulator& values)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::set_row(const Uint iblockrow, const Uint ieq, Real diagval, Real offdiagval)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::get_column_and_replace_to_zero(const Uint iblockcol, Uint ieq, std::vector<Real>& values)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::tie_blockrow_pairs (const Uint iblockrow_to, const Uint iblockrow_from)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::set_diagonal(const std::vector<Real>& diag)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::add_diagonal(const std::vector<Real>& diag)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::get_diagonal(std::vector<Real>& diag)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::reset(Real reset_to)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::print(Common::LogStream& stream)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::print(std::ostream& stream)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

void TrilinosMatrix::print(const std::string& filename)
{
}

////////////////////////////////////////////////////////////////////////////////////////////

