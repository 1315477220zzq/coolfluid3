namespace COOLFluiD {

  namespace MathTools {
   
//////////////////////////////////////////////////////////////////////////////
    
/**
 * Instantiation of the static data
 */
template <class T, class TAG, CFuint N>
T VectorLET<T,TAG,N>::_v[N];

//////////////////////////////////////////////////////////////////////////////
    
template <class T, class TAG, CFuint N>
VectorLET<T,TAG,N>::VectorLET() : 
  LExpr<VectorLET<T,TAG,N>,T,N>()
{
  for (CFuint i = 0; i < N; ++i) {
    _v[i] = 0.0;
  } 
}
    
//////////////////////////////////////////////////////////////////////////////

template <class T, class TAG, CFuint N>
VectorLET<T,TAG,N>::~VectorLET() 
{
}
 
//////////////////////////////////////////////////////////////////////////////
    
template <class T, class TAG, CFuint N>
std::ostream& operator<< (std::ostream& out, const VectorLET<T,TAG,N>& v)
{
  CFuint n = v.size();
  for(CFuint i = 0; i < n; ++i) {
    out << v._v[i] << " " ;
  }
  return out;
}

//////////////////////////////////////////////////////////////////////////////

template <class T, class TAG, CFuint N>
std::istream& operator>> (std::istream& in, VectorLET<T,TAG,N>& v)
{
  CFuint n = v.size();
  for(CFuint i = 0; i < n; ++i) {
    in >> v._v[i];
  }
  return in;
}
    
//////////////////////////////////////////////////////////////////////////////
   
/**
 * Instantiation of the static data
 */
template <class T, class TAG>
T* VectorLET<T,TAG,0>::_v = CFNULL;

//////////////////////////////////////////////////////////////////////////////
   
template <class T, class TAG>
VectorLET<T,TAG,0>::VectorLET(CFuint ns) : 
  LExpr<VectorLET<T,TAG,0>,T,0>(),
  _size(ns)
{
  cf_assert(_v == CFNULL);
  _v = new T[_size];
  for (CFuint i = 0; i < _size; ++i) {
    _v[i] = 0.0;
  } 
}
    
//////////////////////////////////////////////////////////////////////////////

template <class T, class TAG>
VectorLET<T,TAG,0>::~VectorLET() 
{
  delete [] _v;
}
 
//////////////////////////////////////////////////////////////////////////////

template <class T, class TAG>
std::ostream& operator<< (std::ostream& out, const VectorLET<T,TAG,0>& v)
{
  CFuint n = v.size();
  for(CFuint i = 0; i < n; ++i) {
    out << v._v[i] << " " ;
  }
  return out;
}

//////////////////////////////////////////////////////////////////////////////

template <class T, class TAG>
std::istream& operator>> (std::istream& in, VectorLET<T,TAG,0>& v)
{
  CFuint n = v.size();
  for(CFuint i = 0; i < n; ++i) {
    in >> v._v[i];
  }
  return in;
}

//////////////////////////////////////////////////////////////////////////////

  } // namespace MathTools

}   // namespace COOLFluiD
