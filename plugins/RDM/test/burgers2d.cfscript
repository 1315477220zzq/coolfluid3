# be totally unforgiving for exceptions and assertions (batch)
configure //Root/Environment \
  assertion_to_exception:bool=false \
  exception_outputs:bool=true \
  exception_backtrace:bool=true \
  exception_aborts:bool=true

create Wizard CF.RDM.Core.SteadyExplicit

# create a scalar advection model
call Wizard/create_model \
     ModelName:string=model \
     PhysicalModel:string=Burgers2D

# load the mesh
call //Root/model/Domain/load_mesh \
     file:uri=file:square1x1-tg-p2-2kn.msh \
     name:string=mesh

ls //Root/model/Domain/mesh/topology

# configure solver
cd //Root/model/Solver

configure ./ domain:uri=cpath:../Domain

configure time_stepping cfl:real=1.0
configure time_stepping MaxIter:unsigned=1000

# create boundary term

call create_boundary_term Name:string=INLET \
     Type:string=CF.RDM.Core.BcDirichlet \
     Regions:array[uri]=\
//Root/model/Domain/mesh/topology/inlet,\
//Root/model/Domain/mesh/topology/left,\
//Root/model/Domain/mesh/topology/right

configure compute_boundary_terms/INLET Function:string=1.5-2.0*x

# create domain term

call create_domain_term Name:string=INTERNAL \
     Type:string=CF.RDM.Core.LDA \
     Regions:array[uri]=//Root/model/Domain/mesh/topology

# solve

call solve
cd ..

# write solution

create writer CF.Mesh.Gmsh.CWriter

cd writer
configure ./ Fields:array[uri]=//Root/model/Domain/mesh/solution
configure ./ File:string=solution.msh
configure ./ Mesh:uri=//Root/model/Domain/mesh

call write_mesh
