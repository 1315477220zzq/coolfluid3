// OpenCL Kernel
char* GPUSource =
{
"    __kernel void interpolation(__global float* PHI, __global float* waveSpeed,                            \n"
"                                __global float* A, __global float* A_ksi, __global float* A_eta,           \n"
"                                __global float* X_shape, __global float* U_shape, __global float* weights, \n"
"                                 int shape, int quad, int dim, int elem,                                   \n"
"                                __local float* X_quad, __local float* X_ksi, __local float* X_eta,         \n"
"                                __local float* jacobi, __local float* sumLphi, __local float* LU )         \n"
"    {                                                                                                      \n"
"     for( unsigned int tx = get_group_id(0); tx <elem; tx += get_num_groups(0) )                           \n"
"     {                                                                                                     \n"
"          for(unsigned int j = get_local_id(0);j< quad;j+= get_local_size(0) )                             \n"
"          {                                                                                                \n"
"                for( unsigned int k = 0; k < dim; k++ )                                                    \n"
"                {                                                                                          \n"
"                    unsigned int elemC =  j * dim + k;                                                     \n"
"                                                                                                           \n"
"                    float value = 0;                                                                       \n"
"                    float value1 = 0;                                                                      \n"
"                    float value2 = 0;                                                                      \n"
"                                                                                                           \n"
"                    for( unsigned int l = 0; l < shape; l++ )                                              \n"
"                    {                                                                                      \n"
"                        unsigned int elemA = j * shape + l;                                                \n"
"                        unsigned int elemB = tx * ( dim * shape ) + l * dim + k;                           \n"
"                                                                                                           \n"
"                        value += A[elemA] * X_shape[elemB];                                                \n"
"                        value1 += A_ksi[elemA] * X_shape[elemB];                                           \n"
"                        value2 += A_eta[elemA] * X_shape[elemB];                                           \n"
"                    }                                                                                      \n"
"                    X_quad[elemC] = value;                                                                 \n"
"                    X_ksi[elemC] =  value1;                                                                \n"
"                    X_eta[elemC] =  value2;                                                                \n"
"                }                                                                                          \n"
"          }                                                                                                \n"
"                                                                                                           \n"
"          for(unsigned int j = get_local_id(0);j< quad;j+= get_local_size(0) )                             \n"
"          {                                                                                                \n"
"                unsigned int elemA =  j * dim;                                                             \n"
"                jacobi[j] = X_ksi[elemA] * X_eta[elemA+1] - X_eta[elemA] * X_ksi[elemA+1];                 \n"
"          }                                                                                                \n"

"         for(unsigned int j = get_local_id(0);j< quad;j+= get_local_size(0) )                              \n"
"         {                                                                                                 \n"
"                unsigned int elemC = j;                                                                    \n"
"                float value = 0;                                                                           \n"
"                float value1 = 0;                                                                          \n"
"                                                                                                           \n"
"                for( int k = 0; k < shape; k++ )                                                           \n"
"                {                                                                                          \n"
"                    unsigned int elemMatrix = j * shape + k;                                               \n"
"                    unsigned int elemA      = j * dim;                                                     \n"
"                    unsigned int elemB	= tx * (  shape ) + k;                                              \n"

"                                                                                                           \n"
"                    float phiX =  A_ksi[elemMatrix] * X_eta[elemA+1] - A_eta[elemMatrix] * X_ksi[elemA+1]; \n"
"                    float phiY = -A_ksi[elemMatrix] * X_eta[elemA]   + A_eta[elemMatrix] * X_ksi[elemA];   \n"
"                                                                                                           \n"
"                    value += 1.0 * max( ( X_quad[elemA+1] * phiX  - X_quad[elemA] * phiY ), 0.0 );         \n"
"                    value1 += 1.0 * ( X_quad[elemA+1] * phiX  - X_quad[elemA] * phiY ) * U_shape[elemB];   \n"

"                }                                                                                          \n"
"                sumLphi[elemC] = value / jacobi[j];                                                        \n"
"                LU[elemC] = value1 / jacobi[j];                                                            \n"
"          }                                                                                                \n"

"         for(unsigned int j = get_local_id(0);j< shape;j+= get_local_size(0) )                             \n"
"          {                                                                                                \n"
"              unsigned int elemC = tx *  shape + j;                                                        \n"
"              float value = 0;                                                                             \n"
"              float jacobi = 0;                                                                            \n"
"                                                                                                           \n"
"              for( int k = 0; k < quad; k++ )                                                              \n"
"              {                                                                                            \n"
"                  unsigned int elemMatrix = k * shape + j;                                                 \n"
"                  unsigned int elemA      = k * dim;                                                       \n"
"                                                                                                           \n"
"                  float phiX =  A_ksi[elemMatrix] * X_eta[elemA+1] - A_eta[elemMatrix] * X_ksi[elemA+1];   \n"
"                  float phiY = -A_ksi[elemMatrix] * X_eta[elemA]   + A_eta[elemMatrix] * X_ksi[elemA];     \n"
"                                                                                                           \n"
"                                                                                                           \n"
"                  value += max( ( X_quad[elemA+1] * phiX  - X_quad[elemA] * phiY ), 0.0 )  / sumLphi[k] * LU[k] * weights[k];                                                   \n"
"              }                                                                                            \n"
"              PHI[elemC] = value;                                                                          \n"
"           }                                                                                               \n"

"         float xmin = X_shape[tx * ( dim * shape ) ];                                                      \n"
"         float xmax = X_shape[tx * ( dim * shape ) ];                                                      \n"
"         float ymin = X_shape[tx * ( dim * shape ) +1 ];                                                   \n"
"         float ymax = X_shape[tx * ( dim * shape ) +1 ];                                                   \n"
"         for(unsigned int j = 1;j< shape; j++ )                                                            \n"
"         {                                                                                                 \n"
"              xmin = min( xmin, X_shape[tx * ( dim * shape ) + j * dim ] );                                \n"
"              xmax = max( xmax, X_shape[tx * ( dim * shape ) + j * dim ] );                                \n"
"              ymin = min( ymin, X_shape[tx * ( dim * shape ) + j * dim +1] );                              \n"
"              ymax = max( ymax, X_shape[tx * ( dim * shape ) + j * dim +1] );                              \n"
"         }                                                                                                 \n"
"         float dx =xmax-xmin;                                                                              \n"
"         float dy =ymax-ymin;                                                                              \n"
"         waveSpeed[tx] = ( dx*dx +dy*dy );                                                          \n"
"                                                                                                          \n"
"      }                                                                                                    \n"
"    }                                                                                                      \n"
};
